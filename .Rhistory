getwd()
library(tm) ## Framework for text mining.
library(RWeka) ##
library(wordcloud)
library(SnowballC) ## Provides wordStem() for stemming.
library(qdap) ## Quantitative discourse analysis of transcripts.
library(qdapDictionaries)
library(dplyr) ## Data preparation and pipes %>%.
library(RColorBrewer) ## Generate palette of colours for plots.
library(ggplot2) ## Plot word frequencies.
library(scales) ## Include commas in numbers.
library(Rgraphviz) ## Correlation plots.
set.seed(47)
bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
quadgram <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x)) ## function for tm_map to turn desired string into a space
## the following function was necessary after creating the occurence percentages of the ngrams
## any zero occurence percentage resulted in an element of length zero which resulted in the the object being coerced into class list
# returns string w/o leading whitespace  http://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
trim.leading <- function (x)  sub("^\\s+", "", x)
# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^ *|(?<= ) | *$", "", x, perl = T)
install.packages('snow')
install.packages('Rmpi')
library('Rmpi'); library('snow')
library(Rmpi)
install.packages('Rmpi')
library(Rmpi)
vignette(package="parallel", topic = "parallel")
install.packages('paralles')
install.packages('parallel')
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
install.packages("devtools")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
sq.foot <- c(450, 300, 350)
rooms <- c(3, 2, 2)
age <- c(15, 10, 12)
levels <- c(2, 1, 2)
X <- cbind(sq.foot, rooms, age, levels)
View(X)
Y <- c(150, 100, 150)
(tansverse(X)*X)^-1
(rtansverse(X)*X)^-1
(transverse(X)*X)^-1
(t(X)*X)^-1
(t(X)*X.)^-1
(t(.X)*X)^-1
(t(X) %%*%% X)^-1
(t(X) %*% X)^-1
((t(X) %*% X)^-1) %*% (t(X) %*% Y)
b <- ((t(X) %*% X)^-1) %*% (t(X) %*% Y)
D <- c(250, 2, 9, 1)
b * D
((t(X) %*% X)) %*% (t(X) %*% Y)
b %*% D
fit <- lm(Y~., data = cbind(X, Y))
fit <- lm(Y~., data = data.frame(cbind(X, Y)))
fit$coefficients
fit
beta = solve(t(X) %*% X) %*% (t(X) %*% Y) ; beta
t(X) %*% X
(t(X) %*% X)^-1
(t(X) %*% X)^-1 * X
(t(X) %*% X)^-1 %*% X
(t(X) %*% X)^-1 %*% t(X)
(t(X) %*% X)^-1 %*% t(X) %*% Y
b / (t(X) %*% X)^-1 %*% t(X)
b %/% (t(X) %*% X)^-1 %*% t(X)
b %*% ((t(X) %*% X)^-1 %*% t(X))^1
b
t(x) %*% Y
t(X) %*% Y
(t(X) %*% Y) / (t(X) %*% X)
(t(X) %*% Y) %*% (t(X) %*% X)^1
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X$sq.foot
X[,1]
X[,1] <- c(4, 5, 6)
View(X)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X[,3] <- c(7, 8, 9)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
corr(X)
cor(X)
View(X)
X[,1] <- c(4.5, 3, 3.5)
View(X)
X[,3] <- c(1.5, 1, 1.2)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
Y <- c(1.5, 1, 1.5)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
cor(cbind(X, Y))
X[,4] <- c(5, 3, 2)
cor(cbind(X, Y))
b <- solve(t(X) %*% X) %*% t(X) %*% Y
mtcars
mtcars[1:4, 1:4]
set <- mtcars[1:4, 1:4]
set$mpg
Y <- set$mpg
set[,2:4]
X <- set[,2:4]
b <- solve(t(X) %*% X) %*% t(X) %*% Y
as.matrix(X)
X <- as.matrix(X)
Y <- as.matrix(Y)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
View(b)
b * mtcars[5,2:4]
sum(b * mtcars[5,2:4])
mtcars[5,2:4]
b
sum(b %*% mtcars[5,2:4])
sum(b * mtcars[4,2:4])
sum(b * mtcars[3,2:4])
View(mtcars)
sum(b * mtcars[2,2:4])
sum(b * mtcars[1,2:4])
sum(b * mtcars[5,2:4])
sum(b * mtcars[6,2:4])
sum(b * mtcars[7,2:4])
sum(b * mtcars[6,2:4])
pred <- sapply(1:32, function(x){
sum(b * mtcars[x,2:4])
})
comp <- cbind(mtcars$mpg, pred)
View(comp)
mtcars[6,2:4]
X
Y
b
sum(mtcars[6,2:4] * b)
b * mtcars[6, 2:4]
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("ggplot2", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("dplyr", dependencies = T)
library(devtools)
PI-3
pi-3
cos
cos(pi/4)
x = 1:100
radius <- x
rm(x)
diameter <- radius * 2
data <- cbind(radius, diameter)
View(data)
data$circumfrence <- pi * diameter
View(data)
data <- cbind(radius, diameter)
data <- data.frame(data)
data$circumfrence <- diameter * pi
View(data)
data$ten_per_arc <- data$circumfrence * 0.1
View(data)
rm(data)
rm()
rm(diameter)
rm(radius)
length <- 1:100
data <- data.frame(length)
View(data)
data$radius <- length/pi/2
View(data)
acos(8)
asin(8)
acos(0.707/1)
acos(cos(pi/4))
cos(pi/4)
acos(8/8)
asin(8/8)
pi/asin(8/8)
rm(data)
length <- 10:400
data <- data.frame(length)
data$radius <- length/pi/2
View(data)
data$depth <- sqrt(data$radius^2 - 8^2)
View(data)
data$depth <- data$radius - data$depth
View(data)
data$angle <- asin(8/data$radius)
View(data)
data$arclength <- data$angle*data$radius
View(data)
data <- data[-(1:50),]
View(data)
row.names(data) <- NULL
View(data)
plot(data$length, data$depth)
plot(data$length, data$arclength)
plot(data$length, data$arclength)
library(ggplot2)
setwd("D:/Documents/GitHub/NovuInterview")
file.edit('~/.Rprofile')
